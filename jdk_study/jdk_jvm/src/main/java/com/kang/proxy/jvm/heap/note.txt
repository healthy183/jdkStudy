1，HeapTest.java
通过for循环创建对象操作，简单展示minor gc、full gc、oom的过程

2，GCtest.java
简单创建数组观察minor gc前后PSYoungGen(年轻代)、ParOldGen(老年代)的情况

3，GCtOldest.java
展示大对象直接加入老年代的demo

3，概念
3.1 加入老年代
默认情况下经过15次(阀值)minor gc依然没有清除则加入老年代；
可以通过 -XX:MaxTenuringThreshold来设置阀值

3.2 新生代内存分别
jVM默认的8:1:1的比例来分配eden、s0、s1内存，让eden区尽量的大，survivor区够用即可；
JVM默认有这个参数-XX:+UseAdaptiveSizePolicy(默认开启)，会导致这个8:1:1比例自动变化，如果不想这个比例有变
化可以设置参数-XX:-UseAdaptiveSizePolicy

3.3 对象动态年龄判断
jdk8中如果minor gc后，现存经过1、2、3、4次minor gc的对象存活，且1、2、3的总内存超过S0/s1的50%,则3、4以上的对象都直接加入老年代；
意思是N次后面进来的对象超过超过50%,则N及N次以上的都加入到老年代；
可以通过-XX:TargetSurvivorRatio 可以指定百分比；
对象动态年龄判断机制一般是在minor gc之后触发的；

3.4 老年代空间分配担保机制
年轻代每次minor gc之前JVM都会计算下老年代剩余可用空间
如果这个可用空间小于年轻代里现有的所有对象大小之和(包括垃圾对象)
就会看一个“-XX:-HandlePromotionFailure”(jdk1.8.0_162默认无设置)的参数是否设置
如果有这个参数，就会看看老年代的可用内存大小，是否大于之前每一次minor gc后进入老年代的对象的平均大小。
如果上一步结果是小于或者之前说的参数没有设置，那么就会触发一次Full gc，对老年代和年轻代一起回收一次垃圾，
如果回收完还是没有足够空间存放新的对象就会发生"OOM"
当然，如果minor gc之后剩余存活的需要挪动到老年代的对象大小还是大于老年代可用空间，那么也会触发full gc，
fullgc完之后如果还是没有空间放minor gc之后的存活对象，则也会发生"OOM"

3.5 对象内存回收
引用计数法：有循环依赖问题，不建议使用
可达性分析算法
将“GC Roots” 对象作为起点，从这些节点开始向下搜索引用的对象，找到的对象都标记为非垃圾对象，其余未标记的对象都是垃圾对象
GC Roots根节点：线程栈的本地变量、静态变量、本地方法栈的变量等等